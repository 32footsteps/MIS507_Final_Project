import java.util.*;

public class Dice {
  private static Dice instance;
  private Random r=new Random();
  int v=0;

  public static Dice getInstance(){
    if(instance==null){return new Dice();}
    return instance;
  }

  public Dice(){this.setValue();}
  public void setValue(){this.v=1+r.nextInt(6);}
  public int getValue(){return v;}
}
import java.util.*;

public class DuoGame extends Game{
  private static DuoGame instance;
  private Scanner c=new Scanner(System.in);

  public DuoGame(){
    System.out.print("Player 1, what is your name? ");
    super.setName(c.nextLine());
    System.out.println("Welcome, "+super.getName());

    System.out.print("Player 2, what is your name? ");
    super.setName(c.nextLine());
    System.out.println("Welcome, "+super.getName());

    System.out.println("######################################");
    System.out.println("LET\'S PLAY!");
    super.firstRoll();
    super.rollAgain();
  }

  public static DuoGame getInstance(){
    if(instance==null){return new DuoGame();}
    return instance;
  }
}
import java.util.*;

public class Game{
  private Scorecard s1=Scorecard.getInstance();
  private RollDice r1=RollDice.getInstance();
  private ScoreFactory sf=new ScoreFactory();
  Scanner c=new Scanner(System.in);
  int x=0;

  public Game(){}

  public void setName(String s){s1.setName(s);}
  public String getName(){return s1.getName();}

  public void firstRoll(){
    r1.newRoll();
    System.out.println("Your first roll of the dice:");
    this.viewDice();
    x++;
  }

  public void rollAgain(){
    System.out.println("Do you want to roll again?");
    if(c.nextLine().equals("y")){
      this.pickDice();
    }
    else {
      if(x==2){
        this.pickScore();
      }
      else {
        this.rollAgain();
        x++;
      }
    }
  }

  public void pickDice(){
    System.out.println("Which dice do you want to reroll? (pick the dice number)");
    int num=c.nextInt();
    this.newRoll(num-1);
    c.nextLine();
    System.out.println("Do you want to change another dice?");
    if(c.nextLine().equals("y")){this.pickDice();}
    this.viewDice();
    this.pickScore();
  }

  public void newRoll(int i){
    r1.reRoll(i);
  }

  public void viewDice(){
    r1.printRoll();
  }

  public void pickScore(){
    System.out.println(s1.toString());
    System.out.println("Choose the row number that matches where you want to enter your score");
    System.out.println("***to enter a 0 choose a field that doesn't match your roll");
    System.out.println("Your choice: ");
    ScoreProcessor sp = sf.getScore(c.nextInt());
    this.enterScore(sp);
  }

  public void enterScore(ScoreProcessor sp){
    sp.setScore(r1.getRoll(),s1);
    System.out.println("Next roll...");
    this.firstRoll();
  }
}
import java.util.*;

public class RollDice{
  private static RollDice instance;
  Dice d=Dice.getInstance();
  int[] r=new int[5];
  private String dstr="";
  private String vstr="";

  public RollDice(){}

  public static RollDice getInstance(){
    if(instance==null){return new RollDice();}
    return instance;
  }

  public void setRoll(int[] i){this.r=i;}
  public int[] getRoll(){return this.r;}

  public int[] newRoll(){
    for(int i=0;i<r.length;i++){
      d.setValue();
      r[i]=d.getValue();
    }
    this.setRoll(r);
    return r;
  }

  public void reRoll(int i){
    this.getRoll();
    r[i]=this.newValue();
    this.setRoll(r);
  }

  public int newValue(){
    d.setValue();
    return d.getValue();
  }

  public void setString(int[] il){
    dstr="Dice:  ";
    vstr="Value: ";
    for(int i=0;i<il.length;i++){
      dstr=dstr+"["+(i+1)+"] ";
      vstr=vstr+" "+il[i]+"  ";
    }
  }

  public String getD(){return dstr;}
  public String getV(){return vstr;}

  public void printRoll(){
    this.setString(this.getRoll());
    System.out.println(this.getD());
    System.out.println(this.getV());
  }

}
public class Scorecard{
  private static Scorecard instance;
  private int[] ts = new int[6];
  private int[] bs = new int[8];
  private String u="";

  public Scorecard(){
  }

  public void setName(String s){this.u=s;}
  public String getName(){return this.u;}

  public static Scorecard getInstance(){
    if(instance==null){return new Scorecard();}
    return instance;
  }

  public int ts(){
    int num=0;
    for(int i:ts)num+=i;
    return num;
  }

  public int bs(){
    int num=0;
    for(int i:bs)num+=i;
    return num;
  }

  public void setOnes(int i){this.ts[0]+=i;}
  public int getOnes(){return this.ts[0];}

  public void setTwos(int i){this.ts[1]+=i;}
  public int getTwos(){return this.ts[1];}

  public void setThrees(int i){this.ts[2]+=i;}
  public int getThrees(){return this.ts[2];}

  public void setFours(int i){this.ts[3]+=i;}
  public int getFours(){return this.ts[3];}

  public void setFives(int i){this.ts[4]+=i;}
  public int getFives(){return this.ts[4];}

  public void setSixes(int i){this.ts[5]+=i;}
  public int getSixes(){return this.ts[5];}

  public void setToak(int i){this.bs[0]+=i;}
  public int getToak(){return this.bs[0];}

  public void setFoak(int i){this.bs[1]+=i;}
  public int getFoak(){return this.bs[1];}

  public void setFH(int i){this.bs[2]+=i;}
  public int getFH(){return this.bs[2];}

  public void setSS(int i){this.bs[3]+=i;}
  public int getSS(){return this.bs[3];}

  public void setLS(int i){this.bs[4]+=i;}
  public int getLS(){return this.bs[4];}

  public void setY(int i){this.bs[5]+=i;}
  public int getY(){return this.bs[5];}

  public void setC(int i){this.bs[6]+=i;}
  public int getC(){return this.bs[6];}

  public String toString(){
    String s="";
    s+="-----------------------\n";
    s+="User: "+u+"\n";
    s+="-----------------------\n";
    s+="-----------------------\n";
    s+="(1)  ONES:          "+this.getOnes()+"\n";
    s+="(2)  TWOS:          "+this.getTwos()+"\n";
    s+="(3)  THREES:        "+this.getThrees()+"\n";
    s+="(4)  FOUR:          "+this.getFours()+"\n";
    s+="(5)  FIVES:         "+this.getFives()+"\n";
    s+="(6)  SIXES:         "+this.getSixes()+"\n";
    s+="-----------------------\n";
    s+="SUBTOTAL:           "+this.ts()+"\n";
    if(this.ts()>=63){
      s+="TOP BONUS:          35"+"\n";
      s+="TOP TOTAL:          "+(this.ts()+35)+"\n";
    }
    else{
      s+="TOP BONUS:          0\n";
      s+="TOP TOTAL:          "+this.ts()+"\n";
    }
    s+="-----------------------\n";
    s+="(7)  3 OF A KIND:   "+this.getToak()+"\n";
    s+="(8)  4 OF A KIND:   "+this.getFoak()+"\n";
    s+="(9)  FULL HOUSE:    "+this.getFH()+"\n";
    s+="(10) SMALL STRT:    "+this.getSS()+"\n";
    s+="(11) LARGE STRT:    "+this.getLS()+"\n";
    s+="(12) YAHTZEE:       "+this.getY()+"\n";
    s+="(13) CHANCE:        "+this.getC()+"\n";
    s+="------------------------\n";
    s+="BOTTOM TOTAL:       "+this.bs()+"\n";
    s+="------------------------\n";
    s+="------------------------\n";
    if(this.ts()>=63){
      s+="       TOTAL SCORE: \n"+(this.ts()+35+this.bs());
    }else{
      s+="       TOTAL SCORE: \n"+(this.ts()+this.bs());
    }
    s+="-----------------------\n";
    return s;
  }
}
public class ScoreC implements ScoreProcessor{
  private static ScoreC instance;
  private int ttl=0;

  public static ScoreC getInstance(){
    if(instance==null){return new ScoreC();}
    return instance;
  }

  public ScoreC(){}

  @Override
  public void setScore(int[] i, Scorecard s){
    for(int v:i){
      ttl+=v;
    }
    s.setC(ttl);
  }
}
public class ScoreFactory{
  public ScoreProcessor getScore(int i){
    switch(i){
      case(1):
        return new ScoreOnes();
      case(2):
        return new ScoreTwos();
      case(3):
        return new ScoreThrees();
      case(4):
        return new ScoreFours();
      case(5):
        return new ScoreFives();
      case(6):
        return new ScoreSixes();
      case(7):
        return new ScoreToak();
      case(8):
        return new ScoreFoak();
      case(9):
        return new ScoreFH();
      case(10):
        return new ScoreSS();
      case(11):
        return new ScoreLS();
      case(12):
        return new ScoreY();
      case(13):
        return new ScoreC();
    }
    return null;
  }
}
public class ScoreFH implements ScoreProcessor{
  private static ScoreFH instance;
  private int num=0;

  public static ScoreFH getInstance(){
    if(instance==null){return new ScoreFH();}
    return instance;
  }

  public ScoreFH(){}

  @Override
  public void setScore(int[] i, Scorecard s){
    s.setFH(25);
  }
}
public class ScoreFives implements ScoreProcessor{
  private static ScoreFives instance;
  private int num=0;

  public static ScoreFives getInstance(){
    if(instance==null){return new ScoreFives();}
    return instance;
  }

  public ScoreFives(){}

  @Override
  public void setScore(int[] i, Scorecard s){
    for (int v:i){
      if(v==5)num+=v;
    }
    s.setFives(num);
  }
}
public class ScoreFoak implements ScoreProcessor{
  private static ScoreFoak instance;
  private int ttl=0;

  public static ScoreFoak getInstance(){
    if(instance==null){return new ScoreFoak();}
    return instance;
  }

  public ScoreFoak(){}

  @Override
  public void setScore(int[] i, Scorecard s){
    int num=0;
    int li=i[0];
    for(int x=0;x<i.length;x++){
      if(i[x]==li){num++;}
      li=i[x];
    }
    if(num>3){
      for (int v:i){
        ttl+=v;
      }
    }
    s.setFoak(ttl);
  }
}
public class ScoreFours implements ScoreProcessor{
  private static ScoreFours instance;
  private int num=0;

  public static ScoreFours getInstance(){
    if(instance==null){return new ScoreFours();}
    return instance;
  }

  public ScoreFours(){}

  @Override
  public void setScore(int[] i, Scorecard s){
    for (int v:i){
      if(v==4)num+=v;
    }
    s.setFours(num);
  }
}
public class ScoreLS implements ScoreProcessor{
  private static ScoreLS instance;
  private int num=0;

  public static ScoreLS getInstance(){
    if(instance==null){return new ScoreLS();}
    return instance;
  }

  public ScoreLS(){}

  @Override
  public void setScore(int[] i, Scorecard s){
    s.setLS(40);
  }
}
public class ScoreOnes implements ScoreProcessor{
  private static ScoreOnes instance;
  private int num=0;

  public static ScoreOnes getInstance(){
    if(instance==null){return new ScoreOnes();}
    return instance;
  }

  public ScoreOnes(){}

  @Override
  public void setScore(int[] i, Scorecard s){
    for (int v:i){
      if(v==1)num+=v;
    }
    s.setOnes(num);
  }
}
public interface ScoreProcessor{
  public void setScore(int[] i,Scorecard s);
}
public class ScoreSixes implements ScoreProcessor{
  private static ScoreSixes instance;
  private int num=0;

  public static ScoreSixes getInstance(){
    if(instance==null){return new ScoreSixes();}
    return instance;
  }

  public ScoreSixes(){}

  @Override
  public void setScore(int[] i, Scorecard s){
    for (int v:i){
      if(v==6)num+=v;
    }
    s.setSixes(num);
  }
}
public class ScoreSS implements ScoreProcessor{
  private static ScoreSS instance;
  private int num=0;

  public static ScoreSS getInstance(){
    if(instance==null){return new ScoreSS();}
    return instance;
  }

  public ScoreSS(){}

  @Override
  public void setScore(int[] i, Scorecard s){
    s.setSS(30);
  }
}
public class ScoreThrees implements ScoreProcessor{
  private static ScoreThrees instance;
  private int num=0;

  public static ScoreThrees getInstance(){
    if(instance==null){return new ScoreThrees();}
    return instance;
  }

  public ScoreThrees(){}

  @Override
  public void setScore(int[] i, Scorecard s){
    for (int v:i){
      if(v==3)num+=v;
    }
    s.setThrees(num);
  }
}
public class ScoreToak implements ScoreProcessor{
  private static ScoreToak instance;
  private int ttl=0;

  public static ScoreToak getInstance(){
    if(instance==null){return new ScoreToak();}
    return instance;
  }

  public ScoreToak(){}

  @Override
  public void setScore(int[] i, Scorecard s){
    int num=0;
    int li=i[0];
    for(int x=0;x<i.length;x++){
      if(i[x]==li){num++;}
      li=i[x];
    }
    if(num>2){
      for (int v:i){
        ttl+=v;
      }
    }
    s.setToak(ttl);
  }
}
public class ScoreTwos implements ScoreProcessor{
  private static ScoreTwos instance;
  private int num=0;

  public static ScoreTwos getInstance(){
    if(instance==null){return new ScoreTwos();}
    return instance;
  }

  public ScoreTwos(){}

  @Override
  public void setScore(int[] i, Scorecard s){
    for (int v:i){
      if(v==2)num+=v;
    }
    s.setTwos(num);
  }
}
public class ScoreY implements ScoreProcessor{
  private static ScoreY instance;
  private int ttl=0;

  public static ScoreY getInstance(){
    if(instance==null){return new ScoreY();}
    return instance;
  }

  public ScoreY(){}

  @Override
  public void setScore(int[] i, Scorecard s){
    for(int v:i){
      ttl+=v;
    }
    s.setY(ttl);
  }
}
import java.util.*;

public class SoloGame extends Game{
  private static SoloGame instance;
  private Scanner c=new Scanner(System.in);

  public SoloGame(){
    System.out.print("Player 1, what is your name? ");
    super.setName(c.nextLine());
    System.out.println("Welcome, "+super.getName());
    System.out.println("######################################");
    System.out.println("LET\'S PLAY!");
    super.firstRoll();
    super.rollAgain();
  }

  public static SoloGame getInstance(){
    if(instance==null){return new SoloGame();}
    return instance;
  }
}
import java.util.*;

public class Test{
  public static void main(String[] args){
    Scanner c=new Scanner(System.in);
    System.out.print("Welcome to YAHTZEE\nHow many players? (chose 1 or 2)? ");
    switch(c.nextInt()){
      case(1):
        System.out.println("Solo human game");
        SoloGame sg1=SoloGame.getInstance();
      break;
      case(2):
        System.out.println("Human vs. Human game");
        DuoGame sg2=DuoGame.getInstance();
      break;
      default:
        System.out.println("Not an option");
      break;
    }
    c.close();
  }
}
